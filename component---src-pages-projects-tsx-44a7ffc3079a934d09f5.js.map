{"version":3,"file":"component---src-pages-projects-tsx-44a7ffc3079a934d09f5.js","mappings":"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","sources":["webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/gi/GiAchievement.js","webpack://trekhleb.github.io/./src/components/shared/CardTitle.tsx","webpack://trekhleb.github.io/./src/components/shared/CardActions.tsx","webpack://trekhleb.github.io/./src/components/elements/ProjectPreview.tsx","webpack://trekhleb.github.io/./src/components/elements/ProjectsList.tsx","webpack://trekhleb.github.io/./src/components/elements/ProjectFilters.tsx","webpack://trekhleb.github.io/./src/utils/ssr.ts","webpack://trekhleb.github.io/./src/utils/url.ts","webpack://trekhleb.github.io/./src/components/screens/ProjectsScreen.tsx","webpack://trekhleb.github.io/./src/pages/projects.tsx"],"sourcesContent":["// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.GiAchievement = function GiAchievement (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 512 512\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M305.975 298.814l22.704 2.383V486l-62.712-66.965V312.499l18.214 8.895zm-99.95 0l-22.716 2.383V486l62.711-66.965V312.499l-18.213 8.895zm171.98-115.78l7.347 25.574-22.055 14.87-1.847 26.571-25.81 6.425-10.803 24.314-26.46-2.795-18.475 19.087L256 285.403l-23.902 11.677-18.475-19.15-26.46 2.795-10.803-24.313-25.81-6.363-1.847-26.534-22.118-14.92 7.348-25.573-15.594-21.544 15.644-21.52-7.398-25.523 22.068-14.87L150.5 73.03l25.86-6.362 10.803-24.313 26.46 2.794L232.098 26 256 37.677 279.902 26l18.475 19.149 26.46-2.794 10.803 24.313 25.81 6.425 1.847 26.534 22.055 14.87-7.347 25.574 15.656 21.407zm-49.214-21.556a72.242 72.242 0 1 0-72.242 72.242 72.355 72.355 0 0 0 72.242-72.242zm-72.242-52.283a52.282 52.282 0 1 0 52.282 52.283 52.395 52.395 0 0 0-52.282-52.245z\"}}]})(props);\n};\n","import React from 'react';\nimport H, { hLevel } from './H';\nimport { Link } from '../../types/Link';\nimport HyperLink from './HyperLink';\n\ntype CardTitleProps = {\n  children: React.ReactNode,\n  link?: Link,\n};\n\nconst CardTitle = (props: CardTitleProps): React.ReactElement | null => {\n  const { children, link } = props;\n\n  if (!children) {\n    return null;\n  }\n\n  const headerElement = (\n    <H level={hLevel.h3}>\n      {children}\n    </H>\n  );\n\n  const linkElement = link ? (\n    <HyperLink link={link}>\n      {headerElement}\n    </HyperLink>\n  ) : null;\n\n  return (\n    <div className=\"mb-3\">\n      {linkElement || headerElement}\n    </div>\n  );\n};\n\nexport default CardTitle;\n","import React from 'react';\nimport Row from './Row';\n\ntype CardActionsProps = {\n  children: React.ReactNode,\n  className?: string,\n};\n\nconst CardActions = (props: CardActionsProps): React.ReactElement | null => {\n  const { children, className = 'px-6 pb-6' } = props;\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      <Row>\n        {children}\n      </Row>\n    </div>\n  );\n};\n\nexport default CardActions;\n","import React from 'react';\nimport { IoPlay } from '@react-icons/all-files/io5/IoPlay';\nimport { FaGithub } from '@react-icons/all-files/fa/FaGithub';\nimport { BiInfoCircle } from '@react-icons/all-files/bi/BiInfoCircle';\nimport { GiAchievement } from '@react-icons/all-files/gi/GiAchievement';\n\nimport { Project as ProjectType } from '../../types/Project';\nimport DateRange from '../shared/DateRange';\nimport Card from '../shared/Card';\nimport CardContent from '../shared/CardContent';\nimport CardMedia from '../shared/CardMedia';\nimport Tags from '../shared/Tags';\nimport FluidImage from '../shared/FluidImage';\nimport CardTitle from '../shared/CardTitle';\nimport CardActions from '../shared/CardActions';\nimport ButtonLink from '../shared/ButtonLink';\nimport Archived from '../shared/Archived';\nimport Stars from '../shared/Stars';\nimport Row from '../shared/Row';\nimport { getGitHubProjectStars, getProjectAchievementsLink } from '../../utils/project';\nimport { Link } from '../../types/Link';\nimport HyperLink from '../shared/HyperLink';\nimport Badge from '../shared/Badge';\n\ntype ProjectPreviewProps = {\n  project: ProjectType | null,\n};\n\nconst tagsPerProject = 3;\n\nconst withAchievements = true;\n\nconst ProjectPreview = (props: ProjectPreviewProps): React.ReactElement | null => {\n  const { project } = props;\n\n  if (!project) {\n    return null;\n  }\n\n  const projectTags = project?.tags ? (\n    <div>\n      <Tags tags={project.tags} numToShow={tagsPerProject} />\n    </div>\n  ) : null;\n\n  const projectDates = (\n    <DateRange\n      startDate={project.startDate}\n      endDate={project.endDate}\n      className=\"text-xs text-gray-500\"\n    />\n  );\n\n  const projectStars = getGitHubProjectStars(project);\n  const projectStarsLink: Link = {\n    url: project?.srcURL?.url,\n    caption: 'Stars on GitHub',\n  };\n  const stars = typeof projectStars === 'number' ? (\n    <Stars\n      stars={projectStars}\n      link={projectStarsLink}\n      className=\"text-xs text-gray-500 font-light\"\n    />\n  ) : null;\n\n  /* eslint-disable react/no-array-index-key */\n  const projectSummaryLines = project.summary ? project.summary.map(\n    (summaryLine: string | null, index: number) => (\n      <p key={index}>\n        {summaryLine}\n      </p>\n    ),\n  ) : null;\n\n  const projectSummary = projectSummaryLines ? (\n    <div className=\"mb-3 font-light\">\n      {projectSummaryLines}\n    </div>\n  ) : null;\n\n  const defaultProjectUrl = project.archived ? undefined : project.demoURL || project.srcURL;\n\n  const demoLink = project.demoURL && !project.archived ? (\n    <ButtonLink\n      link={project.demoURL}\n      startEnhancer={<IoPlay />}\n      className=\"mr-4\"\n    >\n      Demo\n    </ButtonLink>\n  ) : null;\n\n  const sourceCodeLink = project.srcURL && !project.archived ? (\n    <ButtonLink\n      link={project.srcURL}\n      startEnhancer={<FaGithub />}\n    >\n      Source Code\n    </ButtonLink>\n  ) : null;\n\n  const projectCover = project.cover ? (\n    <FluidImage image={project.cover} />\n  ) : null;\n\n  const archivedStamp = project?.archived ? (\n    <CardActions>\n      <Archived />\n    </CardActions>\n  ) : null;\n\n  const actions = demoLink || sourceCodeLink ? (\n    <CardActions>\n      {demoLink}\n      {sourceCodeLink}\n    </CardActions>\n  ) : null;\n\n  const extraLinksList = project?.links && project?.links.length\n    ? project?.links.map((extraLink: Link, linkIndex) => {\n      return (\n        <li key={linkIndex}>\n          <HyperLink\n            link={extraLink}\n            className=\"text-sm underline\"\n            separatorClassName=\"w-1\"\n            startEnhancer={(<BiInfoCircle size={14} />)}\n          >\n            {extraLink?.caption || 'Read more'}\n          </HyperLink>\n        </li>\n      );\n    })\n    : null;\n\n  const achievementsLink = withAchievements\n    && project?.achievements\n    && project.achievements.length\n    ? (\n      <Row className=\"mt-3\">\n        <HyperLink\n          link={getProjectAchievementsLink(project.id)}\n          className=\"text-sm underline\"\n          separatorClassName=\"w-1\"\n          startEnhancer={(<GiAchievement size={18} />)}\n        >\n          Achievements\n        </HyperLink>\n        <Badge className=\"ml-2\">\n          <small>{project.achievements.length}</small>\n        </Badge>\n      </Row>\n    )\n    : null;\n\n  const externalLinks = extraLinksList ? (\n    <ul className=\"mt-3\">\n      {extraLinksList}\n    </ul>\n  ) : null;\n\n  return (\n    <Card>\n      <CardMedia link={defaultProjectUrl}>\n        {projectCover}\n      </CardMedia>\n      <CardContent>\n        <CardTitle link={defaultProjectUrl}>\n          {project.name}\n        </CardTitle>\n        <Row className=\"mb-3 justify-between\">\n          <div>\n            {projectDates}\n          </div>\n          <div>\n            {stars}\n          </div>\n        </Row>\n        {projectSummary}\n        {projectTags}\n        {achievementsLink}\n        {externalLinks}\n      </CardContent>\n      {actions}\n      {archivedStamp}\n    </Card>\n  );\n};\n\nexport default ProjectPreview;\n","import React from 'react';\n\nimport { Project } from '../../types/Project';\nimport ProjectPreview from './ProjectPreview';\nimport Cards from '../shared/Cards';\n\ntype ProjectsListProps = {\n  projects: Project[],\n};\n\nconst ProjectsList = (props: ProjectsListProps): React.ReactElement => {\n  const { projects } = props;\n\n  const projectsElements = projects.map((project) => {\n    return <ProjectPreview project={project} key={project.id} />;\n  });\n\n  return (\n    <Cards>\n      {projectsElements}\n    </Cards>\n  );\n};\n\nexport default ProjectsList;\n","import React, { ChangeEvent } from 'react';\nimport Row from '../shared/Row';\n\nexport type SortOption = 'startDateAsc' | 'startDateDesc' | 'starsDesc';\n\nexport const sortByStartDateAsc: SortOption = 'startDateAsc';\nexport const sortByStartDateDesc: SortOption = 'startDateDesc';\nexport const sortByStarsDesc: SortOption = 'starsDesc';\n\ntype Sorter = {\n  title: string,\n  hidden?: boolean,\n}\n\ntype Sorters = Record<SortOption, Sorter>;\n\nconst sorters: Sorters = {\n  [sortByStartDateDesc]: {\n    title: '➘ start date',\n  },\n  [sortByStartDateAsc]: {\n    title: '➚ start date',\n    hidden: true,\n  },\n  [sortByStarsDesc]: {\n    title: '➘ stars',\n  },\n};\n\nexport const supportedSortOptions: SortOption[] = Object\n  .keys(sorters)\n  // @ts-ignore\n  .filter((sortOption: SortOption) => !sorters[sortOption].hidden);\n\ntype ProjectFiltersProps = {\n  sortBy: SortOption,\n  onSort: (sortKey: SortOption) => void,\n};\n\nconst ProjectFilters = (props: ProjectFiltersProps): React.ReactElement => {\n  const { onSort, sortBy } = props;\n\n  const sorterOptions = Object.keys(sorters)\n    .filter((sorterKey: string) => {\n      const sorter = sorters[sorterKey as SortOption];\n      return !sorter?.hidden;\n    })\n    .map((sorterKey: string) => {\n      const sorter = sorters[sorterKey as SortOption];\n      return (\n        <option key={sorterKey} value={sorterKey}>\n          {sorter.title}\n        </option>\n      );\n    });\n\n  const onSortChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n    const selectedKey: SortOption = event.target.value as SortOption;\n    onSort(selectedKey);\n  };\n\n  return (\n    <div>\n      <Row>\n        <div className=\"text-sm text-gray-500 mr-1\">\n          Sort by:\n        </div>\n        <div>\n          <select onChange={onSortChange} defaultValue={sortBy} className=\"text-sm\">\n            {sorterOptions}\n          </select>\n        </div>\n      </Row>\n    </div>\n  );\n};\n\nexport default ProjectFilters;\n","// If it is server-side-rendering, we don't have an access to document.\n// @see: https://www.gatsbyjs.com/docs/using-client-side-only-packages/\nexport const isSSR = typeof document === 'undefined';\n","import { isSSR } from './ssr';\n\nconst getSearchParams = (): URLSearchParams => {\n  const searchQuery = isSSR ? '' : document.location.search.substring(1);\n  return new URLSearchParams(searchQuery);\n};\n\nexport const getSearchParam = (name: string): string | null => {\n  const searchParams = getSearchParams();\n  return searchParams.get(name);\n};\n\nexport const setSearchParam = (name: string, value: string): void => {\n  if (isSSR) {\n    return;\n  }\n  const searchParams = getSearchParams();\n  searchParams.set(name, value);\n  const relativeURL = `?${searchParams.toString()}${document.location.hash}`;\n  window.history.pushState(null, '', relativeURL);\n};\n\nexport const deleteSearchParam = (name: string): void => {\n  if (isSSR) {\n    return;\n  }\n  const searchParams = getSearchParams();\n  searchParams.delete(name);\n  const relativeURL = `?${searchParams.toString()}${document.location.hash}`;\n  window.history.pushState(null, '', relativeURL);\n};\n\nexport const getStringSearchParam = (name: string, defaultValue: string): string => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam;\n};\n\nexport const getIntSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseInt(searchParam, 10);\n};\n\nexport const getFloatSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseFloat(searchParam);\n};\n\nexport const getBooleanSearchParam = (name: string, defaultValue: boolean): boolean => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam.toLowerCase() === 'true';\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { Project as ProjectType, Projects as ProjectsType } from '../../types/Project';\nimport ProjectsList from '../elements/ProjectsList';\nimport PageLayout from '../layouts/PageLayout';\nimport PageHeader from '../shared/PageHeader';\nimport Badge from '../shared/Badge';\nimport Row from '../shared/Row';\nimport SEO from '../shared/SEO';\nimport ProjectFilters, {\n  sortByStarsDesc, sortByStartDateAsc,\n  sortByStartDateDesc,\n  SortOption, supportedSortOptions,\n} from '../elements/ProjectFilters';\nimport { getGitHubProjectStars, getTotalGetHubProjectStars, projectMapToArray } from '../../utils/project';\nimport Stars from '../shared/Stars';\nimport { getStringSearchParam, setSearchParam } from '../../utils/url';\n\ntype ProjectsScreenProps = {\n  projects: ProjectsType,\n};\n\ntype ProjectSorter = {\n  // Returns -1, 0, +1.\n  sort: (a: ProjectType, b: ProjectType) => number,\n};\n\ntype ProjectSorters = Record<SortOption, ProjectSorter>;\n\nconst SORT_PARAM_NAME = 'sort';\n\n// @ts-ignore\nconst projectSorters: ProjectSorters = {\n  [sortByStartDateDesc]: {\n    sort: (a: ProjectType, b: ProjectType): number => {\n      if (!a?.startDate || !b.startDate || a.startDate === b.startDate) {\n        return 0;\n      }\n      return a.startDate > b.startDate ? -1 : 1;\n    },\n  },\n  [sortByStartDateAsc]: {\n    sort: (a: ProjectType, b: ProjectType): number => {\n      if (!a?.startDate || !b.startDate || a.startDate === b.startDate) {\n        return 0;\n      }\n      return a.startDate < b.startDate ? -1 : 1;\n    },\n  },\n  [sortByStarsDesc]: {\n    sort: (a: ProjectType, b: ProjectType): number => {\n      const aStars = getGitHubProjectStars(a) || 0;\n      const bStars = getGitHubProjectStars(b) || 0;\n      if (aStars === bStars) {\n        return 0;\n      }\n      return aStars > bStars ? -1 : 1;\n    },\n  },\n};\n\nconst getDefaultSortOption = (): SortOption => {\n  const defaultOption = sortByStartDateDesc;\n  // @ts-ignore\n  const sortFromURL: SortOption = getStringSearchParam(SORT_PARAM_NAME, defaultOption);\n  if (supportedSortOptions.includes(sortFromURL)) {\n    return sortFromURL;\n  }\n  return defaultOption;\n};\n\nconst ProjectsScreen = (props: ProjectsScreenProps): React.ReactElement => {\n  const { projects } = props;\n\n  const [sortBy, setSortBy] = useState<SortOption>(getDefaultSortOption());\n  const [filteredProjects, setFilteredProjects] = useState<ProjectType[]>(\n    projectMapToArray(projects),\n  );\n\n  const onSort = (newSortOption: SortOption): void => {\n    setSearchParam(SORT_PARAM_NAME, newSortOption);\n    setSortBy(newSortOption);\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    const sortedProjects = [...filteredProjects].sort(projectSorters[sortBy].sort);\n    setFilteredProjects(sortedProjects);\n  }, [sortBy]);\n\n  const projectsNum = filteredProjects.length;\n\n  return (\n    <PageLayout>\n      <SEO\n        title=\"Projects\"\n        description=\"Projects and experiments that help people learn\"\n      />\n      <Row>\n        <PageHeader>Projects</PageHeader>\n        <Badge className=\"ml-3 self-start\">{projectsNum}</Badge>\n      </Row>\n      <Row className=\"mb-6 justify-between\">\n        <ProjectFilters onSort={onSort} sortBy={sortBy} />\n        <Row className=\"ml-3\">\n          <div className=\"text-sm text-gray-500 mr-1\">\n            Total stars:\n          </div>\n          <Stars stars={getTotalGetHubProjectStars(projects)} />\n        </Row>\n      </Row>\n      <ProjectsList projects={filteredProjects} />\n    </PageLayout>\n  );\n};\n\nexport default ProjectsScreen;\n","import React from 'react';\n\nimport ProjectsScreen from '../components/screens/ProjectsScreen';\nimport { projects } from '../data/projects';\n\nconst Projects = (): React.ReactElement => {\n  return (\n    <ProjectsScreen projects={projects} />\n  );\n};\n\nexport default Projects;\n"],"names":["GenIcon","module","exports","props","children","link","headerElement","React","H","level","hLevel","linkElement","HyperLink","className","Row","_project$srcURL","project","projectTags","tags","Tags","numToShow","projectDates","DateRange","startDate","endDate","projectStars","getGitHubProjectStars","projectStarsLink","url","srcURL","caption","stars","Stars","projectSummaryLines","summary","map","summaryLine","index","key","projectSummary","defaultProjectUrl","archived","undefined","demoURL","demoLink","ButtonLink","startEnhancer","IoPlay","sourceCodeLink","FaGithub","projectCover","cover","FluidImage","image","archivedStamp","CardActions","Archived","actions","extraLinksList","links","length","extraLink","linkIndex","separatorClassName","BiInfoCircle","size","achievementsLink","withAchievements","achievements","getProjectAchievementsLink","id","GiAchievement","Badge","externalLinks","Card","CardMedia","CardContent","CardTitle","name","projects","projectsElements","ProjectPreview","Cards","sortByStartDateAsc","sortByStartDateDesc","sortByStarsDesc","sorters","title","hidden","supportedSortOptions","Object","keys","filter","sortOption","onSort","sortBy","sorterOptions","sorterKey","sorter","value","onChange","event","selectedKey","target","defaultValue","isSSR","document","getSearchParams","searchQuery","location","search","substring","URLSearchParams","getSearchParam","get","SORT_PARAM_NAME","projectSorters","sort","a","b","aStars","bStars","getDefaultSortOption","defaultOption","sortFromURL","getStringSearchParam","searchParam","includes","setSortBy","useState","filteredProjects","setFilteredProjects","projectMapToArray","useEffect","sortedProjects","_toConsumableArray","projectsNum","PageLayout","SEO","description","PageHeader","ProjectFilters","newSortOption","setSearchParam","searchParams","set","relativeURL","toString","hash","window","history","pushState","getTotalGetHubProjectStars","ProjectsList","Projects","ProjectsScreen"],"sourceRoot":""}